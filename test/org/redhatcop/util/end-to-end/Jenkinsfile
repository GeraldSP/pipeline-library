library identifier: "pipeline-library@master", retriever: modernSCM(
  [$class: "GitSCMSource",
   remote: "https://github.com/redhat-cop/pipeline-library.git"])

pipeline {
  // Use Jenkins Maven slave
  // Jenkins will dynamically provision this as OpenShift Pod
  // All the stages and steps of this Pipeline will be executed on this Pod
  // After Pipeline completes the Pod is killed so every run will have clean
  // workspace
  agent {
    label 'maven'
  }

  // Pipeline Stages start here
  // Requeres at least one stage
  stages {

    // Checkout source code
    // This is required as Pipeline code is originally checkedout to
    // Jenkins Master but this will also pull this same code to this slave
    stage('Git Checkout') {
      steps {
        // Turn off Git's SSL cert check, uncomment if needed
        // sh 'git config --global http.sslVerify false'
        git url: "${SOURCE_CODE_URL}"
      }
    }

    // Run Maven build, skipping tests
    stage('Build'){
      steps {
        sh "mvn clean install -q"
      }
    }

    // Build Container Image using the artifacts produced in previous stages
    stage('Build Container Image'){
       steps {
         binaryBuild(projectName: "pipeline-library-dev", buildConfigName: "spring-rest", artifactsDirectoryName: "target")
       }
    }

    stage ('Verify Deployment to Dev') {
      steps {
        verifyDeployment(projectName: "pipeline-library-dev", targetApp: "spring-rest")
      }
    }

    stage('Promote image') {
      steps {
        tagImage(sourceImagePath: "pipeline-library-dev", sourceImageName: "spring-rest", toImagePath: "pipeline-library-test")
      }
    }

    stage ('Verify Deployment to test') {
      steps {
        verifyDeployment(projectName: "pipeline-library-test", targetApp: "spring-rest")
      }
    }

  }
}
